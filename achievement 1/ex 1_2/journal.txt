1.	Imagine you’re having a conversation with a future colleague about whether to use the iPython Shell instead of Python’s default shell. What reasons would you give to explain the benefits of using the iPython Shell over the default one?
I would at least point out that iPython is better in the sence that one can review and contrast the code (meaning it has color and it is more readable). If there is something you need to edit, there is the possibility to correct it, while you can in python’s default shell it can be a bit confusing to go back and trace where was the change made.

2.	Python has a host of different data types that allow you to store and organize information. List 4 examples of data types that Python recognizes, briefly define them, and indicate whether they are scalar or non-scalar.

Data type	Definition	Scalar or Non-Scalar?
Integer	Represents numbers (integers) from 0 to infinity, as well as negative	scalar
Float	Represents decimal numbers, negative as well	Scalar
Bool	Represents either true or false, for conditions	Scalar
NoneType	Special type, similar to the null value in other languages	scalar
Tuple	Linear arrays that can store multiple values	nonscalar
lists	Another type of order sequence that can be mutable as compared to tuple	nonscalar


3.	A frequent question at job interviews for Python developers is: what is the difference between lists and tuples in Python? Write down how you would respond.
The main difference is the mutability. Tuple can only delete a value in order to correct the mistake, where as in lists one can edit and delete the values within the list.
4.	In the task for this Exercise, you decided what you thought was the most suitable data structure for storing all the information for a recipe. Now, imagine you’re creating a language-learning app that helps users memorize vocabulary through flashcards. Users can input vocabulary words, definitions, and their category (noun, verb, etc.) into the flashcards. They can then quiz themselves by flipping through the flashcards. Think about the necessary data types and what would be the most suitable data structure for this language-learning app. Between tuples, lists, and dictionaries, which would you choose? Think about their respective advantages and limitations, and where flexibility might be useful if you were to continue developing the language-learning app beyond vocabulary memorization. 
I think the alternatives could be either list or dictionary. Since one could save any type of data within the list or dictionary. Perhaps the most suitable would be a list. The list could be structured in a way that the vocabulary is set up as a dictionary, facilitating to add key pairs for the word and the specific trait the user would like to add (what type of word is it, definition, etc.)
